(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"d:\\phaserGulpStateMachine\\src\\js\\main.js":[function(require,module,exports){
var StateMachineExample = StateMachineExample || {};

StateMachineExample.game = new Phaser.Game(720, 350, Phaser.CANVAS);
StateMachineExample.game.state.add("BootState", require('./states/BootState'));
StateMachineExample.game.state.add("LoadingState", require('./states/LoadingState'));
StateMachineExample.game.state.add("DemoState", require('./states/DemoState'));
StateMachineExample.game.state.start("BootState", true, false, "assets/levels/demo_level.json", "DemoState");
},{"./states/BootState":"d:\\phaserGulpStateMachine\\src\\js\\states\\BootState.js","./states/DemoState":"d:\\phaserGulpStateMachine\\src\\js\\states\\DemoState.js","./states/LoadingState":"d:\\phaserGulpStateMachine\\src\\js\\states\\LoadingState.js"}],"d:\\phaserGulpStateMachine\\src\\js\\prefabs\\Hero.js":[function(require,module,exports){
var Hero = function (game_state, name, position, properties) {
    "use strict";
    require('./Prefab').call(this, game_state, name, position, properties);
    
    this.anchor.setTo(0.5);
    
    this.walking_speed = +properties.walking_speed;
    this.jumping_speed = +properties.jumping_speed;

    this.game_state.game.physics.arcade.enable(this);
    this.body.collideWorldBounds = true;
    
    // create state machine and add states
    var stateMachine = require('./../state_machine/StateMachine');
    var standingState = require('./../state_machine/StandingState');
    var walkingState = require('./../state_machine/WalkingState');
    var jumpingState = require('./../state_machine/JumpingState');
    this.state_machine = new stateMachine();
    this.state_machine.add_state("standing", new standingState("standing", this, 3));
    this.state_machine.add_state("walking_left", new walkingState("walking_left", this, -1, this.walking_speed));
    this.state_machine.add_state("walking_right", new walkingState("walking_left", this, 1, this.walking_speed));
    this.state_machine.add_state("jumping", new jumpingState("jumping", this, this.jumping_speed));
    this.state_machine.set_initial_state("standing");
    
    // add callbacks to keyboard events
    this.game_state.game.input.keyboard.addCallbacks(this, this.process_on_down_input, this.process_on_up_input, null);
};

Hero.prototype = Object.create(require('./Prefab').prototype);
Hero.prototype.constructor = Hero;

Hero.prototype.update = function () {
    "use strict";
    this.game_state.game.physics.arcade.collide(this, this.game_state.layers.collision);
    
    // touching ground tile
    if (this.body.blocked.down) {
        var command = require('./../state_machine/Command');
        this.state_machine.handle_input(new command("fall", {}));
    }
};

Hero.prototype.process_on_down_input = function (event) {
    "use strict";
    var command = require('./../state_machine/Command');
    switch (event.keyCode) {
    case Phaser.Keyboard.LEFT:
        // walk left
        this.state_machine.handle_input(new command("walk", {direction: "left"}));
        break;
    case Phaser.Keyboard.RIGHT:
        // walk right
        this.state_machine.handle_input(new command("walk", {direction: "right"}));
        break;
    case Phaser.Keyboard.UP:
        // jump
        this.state_machine.handle_input(new command("jump", {}));
        break;
    }
};

Hero.prototype.process_on_up_input = function (event) {
    "use strict";
    var command = require('./../state_machine/Command');
    switch (event.keyCode) {
    case Phaser.Keyboard.LEFT:
        this.state_machine.handle_input(new command("stop", {}));
        break;
    case Phaser.Keyboard.RIGHT:
        this.state_machine.handle_input(new command("stop", {}));
        break;
    }
};

module.exports = Hero;
},{"./../state_machine/Command":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\Command.js","./../state_machine/JumpingState":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\JumpingState.js","./../state_machine/StandingState":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\StandingState.js","./../state_machine/StateMachine":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\StateMachine.js","./../state_machine/WalkingState":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\WalkingState.js","./Prefab":"d:\\phaserGulpStateMachine\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpStateMachine\\src\\js\\prefabs\\Prefab.js":[function(require,module,exports){
var Prefab = function (game_state, name, position, properties) {
    "use strict";
    Phaser.Sprite.call(this, game_state.game, position.x, position.y, properties.texture);
    
    this.game_state = game_state;
    
    this.name = name;
    
    this.game_state.groups[properties.group].add(this);
    this.frame = +properties.frame;
    
    if (properties.scale) {
        this.scale.setTo(properties.scale.x, properties.scale.y);
    }
    
    this.game_state.prefabs[name] = this;
};

Prefab.prototype = Object.create(Phaser.Sprite.prototype);
Prefab.prototype.constructor = Prefab;

module.exports = Prefab;
},{}],"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\Command.js":[function(require,module,exports){
var Command = function (name, properties) {
    "use strict";
    this.name = name;
    for (var property in properties) {
        if (properties.hasOwnProperty(property)) {
            this[property] = properties[property];
        }
    }
};

module.exports = Command;

},{}],"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\JumpingState.js":[function(require,module,exports){
var JumpingState = function (name, prefab, jumping_speed) {
    "use strict";
    require('./State').call(this, name, prefab);
    this.jumping_speed = jumping_speed;
};

JumpingState.prototype = Object.create(require('./State').prototype);
JumpingState.prototype.constructor = JumpingState;

JumpingState.prototype.enter = function () {
    "use strict";
    // set vertical velocity
    this.prefab.body.velocity.y = -this.jumping_speed;
};

JumpingState.prototype.handle_input = function (command) {
    "use strict";
    switch (command.name) {
    case "fall":
        return "standing";
    }
    require('./State').prototype.handle_input.call(this, command);
};

module.exports= JumpingState;
},{"./State":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\State.js"}],"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\StandingState.js":[function(require,module,exports){
var StandingState = function (name, prefab, frame) {
    "use strict";
    require('./State').call(this, name, prefab);
    this.frame = frame;
};

StandingState.prototype = Object.create(require('./State').prototype);
StandingState.prototype.constructor = StandingState;

StandingState.prototype.enter = function () {
    "use strict";
    // set standing frame and velocity to 0
    this.prefab.frame = this.frame;
    this.prefab.body.velocity.x = 0;
};

StandingState.prototype.handle_input = function (command) {
    "use strict";
    switch (command.name) {
    case "walk":
        if (command.direction === "left") {
            return "walking_left";
        } else {
            return "walking_right";
        }
    case "jump":
        return "jumping";
    }
    require('./State').prototype.handle_input.call(this, command);
};

module.exports = StandingState;
},{"./State":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\State.js"}],"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\State.js":[function(require,module,exports){
var State = function (name, prefab) {
    "use strict";
    this.name = name;
    this.prefab = prefab;
};

State.prototype.enter = function () {
    "use strict";
};

State.prototype.exit = function () {
    "use strict";
};

State.prototype.handle_input = function (command) {
    "use strict";
    return this.name;
};

module.exports = State;
},{}],"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\StateMachine.js":[function(require,module,exports){
var StateMachine = function () {
    "use strict";
    this.states = {};
};

StateMachine.prototype.add_state = function (state_name, state) {
    "use strict";
    this.states[state_name] = state;
};

StateMachine.prototype.set_initial_state = function (state_name) {
    "use strict";
    this.current_state = this.states[state_name];
    this.current_state.enter();
};

StateMachine.prototype.handle_input = function (command) {
    "use strict";
    var next_state = this.current_state.handle_input(command);
    if (next_state && next_state !== this.current_state.name) {
        this.current_state.exit();
        this.current_state = this.states[next_state];
        this.current_state.enter();
    }
};

module.exports = StateMachine;

},{}],"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\WalkingState.js":[function(require,module,exports){
var WalkingState = function (name, prefab, direction, walking_speed) {
    "use strict";
    require('./State').call(this, name, prefab);
    
    this.walking_animation = this.prefab.animations.add("walking", [0, 1, 2, 1], 6, true);
    
    this.direction = direction;
    this.walking_speed = walking_speed;
};

WalkingState.prototype = Object.create(require('./State').prototype);
WalkingState.prototype.constructor = WalkingState;

WalkingState.prototype.enter = function () {
    "use strict";
    // start animation and set velocity
    this.walking_animation.play();
    this.prefab.body.velocity.x = this.direction * this.walking_speed;
    
    if (this.direction === 1) {
        this.prefab.scale.setTo(-1, 1);
    } else {
        this.prefab.scale.setTo(1, 1);
    }
};

WalkingState.prototype.exit = function () {
    "use strict";
    // stop animation and set velocity to zero
    this.walking_animation.stop();
};

WalkingState.prototype.handle_input = function (command) {
    "use strict";
    switch (command.name) {
    case "stop":
        return "standing";
    case "jump":
        return "jumping";
    }
    require('./State').prototype.handle_input.call(this, command);
};

module.exports = WalkingState;
},{"./State":"d:\\phaserGulpStateMachine\\src\\js\\state_machine\\State.js"}],"d:\\phaserGulpStateMachine\\src\\js\\states\\BootState.js":[function(require,module,exports){
var BootState = function () {
    "use strict";
    Phaser.State.call(this);
};

BootState.prototype = Object.create(Phaser.State.prototype);
BootState.prototype.constructor = BootState;

BootState.prototype.init = function (level_file, next_state) {
    "use strict";
    this.level_file = level_file;
    this.next_state = next_state;
};

BootState.prototype.preload = function () {
    "use strict";
    this.load.text("level1", this.level_file);
};

BootState.prototype.create = function () {
    "use strict";
    var level_text = this.game.cache.getText("level1");
    var level_data = JSON.parse(level_text);
    this.game.state.start("LoadingState", true, false, level_data, this.next_state);
};

module.exports = BootState;
},{}],"d:\\phaserGulpStateMachine\\src\\js\\states\\DemoState.js":[function(require,module,exports){
var DemoState = function () {
    "use strict";
    Phaser.State.call(this);
    
    this.prefab_classes = {
        "hero": require('./../prefabs/Hero').prototype.constructor
    };
};

DemoState.prototype = Object.create(Phaser.State.prototype);
DemoState.prototype.constructor = DemoState;

DemoState.prototype.init = function (level_data) {
    "use strict";
    var tileset_index, tile_dimensions;
    this.level_data = this.level_data || level_data;
    
    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.scale.pageAlignHorizontally = true;
    this.scale.pageAlignVertically = true;
    
    // start physics system
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 1000;
    
    // create map and set tileset
    this.map = this.game.add.tilemap(this.level_data.map.key);
    tileset_index = 0;
    this.map.tilesets.forEach(function (tileset) {
        this.map.addTilesetImage(tileset.name, this.level_data.map.tilesets[tileset_index]);
        tileset_index += 1;
    }, this);
};

DemoState.prototype.create = function () {
    "use strict";
    var group_name, object_layer, collision_tiles;
    
    // create map layers
    this.layers = {};
    this.map.layers.forEach(function (layer) {
        this.layers[layer.name] = this.map.createLayer(layer.name);
        if (layer.properties.collision) { // collision layer
            collision_tiles = [];
            layer.data.forEach(function (data_row) { // find tiles used in the layer
                data_row.forEach(function (tile) {
                    // check if it's a valid tile index and isn't already in the list
                    if (tile.index > 0 && collision_tiles.indexOf(tile.index) === -1) {
                        collision_tiles.push(tile.index);
                    }
                }, this);
            }, this);
            this.map.setCollision(collision_tiles, true, layer.name);
        }
    }, this);
    // resize the world to be the size of the current layer
    this.layers[this.map.layer.name].resizeWorld();
    
    // create groups
    this.groups = {};
    this.level_data.groups.forEach(function (group_name) {
        this.groups[group_name] = this.game.add.group();
    }, this);
    
    this.prefabs = {};
    
    for (object_layer in this.map.objects) {
        if (this.map.objects.hasOwnProperty(object_layer)) {
            // create layer objects
            this.map.objects[object_layer].forEach(this.create_object, this);
        }
    }
};

DemoState.prototype.create_object = function (object) {
    "use strict";
    var object_y, position, prefab;
    // tiled coordinates starts in the bottom left corner
    object_y = (object.gid) ? object.y - (this.map.tileHeight / 2) : object.y + (object.height / 2);
    position = {"x": object.x + (this.map.tileHeight / 2), "y": object_y};
    // create object according to its type
    if (this.prefab_classes.hasOwnProperty(object.type)) {
        prefab = new this.prefab_classes[object.type](this, object.name, position, object.properties);
    }
    this.prefabs[object.name] = prefab;
};

module.exports = DemoState;
},{"./../prefabs/Hero":"d:\\phaserGulpStateMachine\\src\\js\\prefabs\\Hero.js"}],"d:\\phaserGulpStateMachine\\src\\js\\states\\LoadingState.js":[function(require,module,exports){
var LoadingState = function () {
    "use strict";
    Phaser.State.call(this);
};

LoadingState.prototype = Object.create(Phaser.State.prototype);
LoadingState.prototype.constructor = LoadingState;

LoadingState.prototype.init = function (level_data, next_state) {
    "use strict";
    this.level_data = level_data;
    this.next_state = next_state;
};

LoadingState.prototype.preload = function () {
    "use strict";
    var assets, asset_loader, asset_key, asset;
    assets = this.level_data.assets;
    for (asset_key in assets) { // load assets according to asset key
        if (assets.hasOwnProperty(asset_key)) {
            asset = assets[asset_key];
            switch (asset.type) {
            case "image":
                this.load.image(asset_key, asset.source);
                break;
            case "spritesheet":
                this.load.spritesheet(asset_key, asset.source, asset.frame_width, asset.frame_height, asset.frames, asset.margin, asset.spacing);
                break;
            case "tilemap":
                this.load.tilemap(asset_key, asset.source, null, Phaser.Tilemap.TILED_JSON);
                break;
            }
        }
    }
};

LoadingState.prototype.create = function () {
    "use strict";
    this.game.state.start(this.next_state, true, false, this.level_data);
};

module.exports = LoadingState;
},{}]},{},["d:\\phaserGulpStateMachine\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvanMvbWFpbi5qcyIsInNyYy9qcy9wcmVmYWJzL0hlcm8uanMiLCJzcmMvanMvcHJlZmFicy9QcmVmYWIuanMiLCJzcmMvanMvc3RhdGVfbWFjaGluZS9Db21tYW5kLmpzIiwic3JjL2pzL3N0YXRlX21hY2hpbmUvSnVtcGluZ1N0YXRlLmpzIiwic3JjL2pzL3N0YXRlX21hY2hpbmUvU3RhbmRpbmdTdGF0ZS5qcyIsInNyYy9qcy9zdGF0ZV9tYWNoaW5lL1N0YXRlLmpzIiwic3JjL2pzL3N0YXRlX21hY2hpbmUvU3RhdGVNYWNoaW5lLmpzIiwic3JjL2pzL3N0YXRlX21hY2hpbmUvV2Fsa2luZ1N0YXRlLmpzIiwic3JjL2pzL3N0YXRlcy9Cb290U3RhdGUuanMiLCJzcmMvanMvc3RhdGVzL0RlbW9TdGF0ZS5qcyIsInNyYy9qcy9zdGF0ZXMvTG9hZGluZ1N0YXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3hCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQy9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN2RkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsInZhciBTdGF0ZU1hY2hpbmVFeGFtcGxlID0gU3RhdGVNYWNoaW5lRXhhbXBsZSB8fCB7fTtcblxuU3RhdGVNYWNoaW5lRXhhbXBsZS5nYW1lID0gbmV3IFBoYXNlci5HYW1lKDcyMCwgMzUwLCBQaGFzZXIuQ0FOVkFTKTtcblN0YXRlTWFjaGluZUV4YW1wbGUuZ2FtZS5zdGF0ZS5hZGQoXCJCb290U3RhdGVcIiwgcmVxdWlyZSgnLi9zdGF0ZXMvQm9vdFN0YXRlJykpO1xuU3RhdGVNYWNoaW5lRXhhbXBsZS5nYW1lLnN0YXRlLmFkZChcIkxvYWRpbmdTdGF0ZVwiLCByZXF1aXJlKCcuL3N0YXRlcy9Mb2FkaW5nU3RhdGUnKSk7XG5TdGF0ZU1hY2hpbmVFeGFtcGxlLmdhbWUuc3RhdGUuYWRkKFwiRGVtb1N0YXRlXCIsIHJlcXVpcmUoJy4vc3RhdGVzL0RlbW9TdGF0ZScpKTtcblN0YXRlTWFjaGluZUV4YW1wbGUuZ2FtZS5zdGF0ZS5zdGFydChcIkJvb3RTdGF0ZVwiLCB0cnVlLCBmYWxzZSwgXCJhc3NldHMvbGV2ZWxzL2RlbW9fbGV2ZWwuanNvblwiLCBcIkRlbW9TdGF0ZVwiKTsiLCJ2YXIgSGVybyA9IGZ1bmN0aW9uIChnYW1lX3N0YXRlLCBuYW1lLCBwb3NpdGlvbiwgcHJvcGVydGllcykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHJlcXVpcmUoJy4vUHJlZmFiJykuY2FsbCh0aGlzLCBnYW1lX3N0YXRlLCBuYW1lLCBwb3NpdGlvbiwgcHJvcGVydGllcyk7XG4gICAgXG4gICAgdGhpcy5hbmNob3Iuc2V0VG8oMC41KTtcbiAgICBcbiAgICB0aGlzLndhbGtpbmdfc3BlZWQgPSArcHJvcGVydGllcy53YWxraW5nX3NwZWVkO1xuICAgIHRoaXMuanVtcGluZ19zcGVlZCA9ICtwcm9wZXJ0aWVzLmp1bXBpbmdfc3BlZWQ7XG5cbiAgICB0aGlzLmdhbWVfc3RhdGUuZ2FtZS5waHlzaWNzLmFyY2FkZS5lbmFibGUodGhpcyk7XG4gICAgdGhpcy5ib2R5LmNvbGxpZGVXb3JsZEJvdW5kcyA9IHRydWU7XG4gICAgXG4gICAgLy8gY3JlYXRlIHN0YXRlIG1hY2hpbmUgYW5kIGFkZCBzdGF0ZXNcbiAgICB2YXIgc3RhdGVNYWNoaW5lID0gcmVxdWlyZSgnLi8uLi9zdGF0ZV9tYWNoaW5lL1N0YXRlTWFjaGluZScpO1xuICAgIHZhciBzdGFuZGluZ1N0YXRlID0gcmVxdWlyZSgnLi8uLi9zdGF0ZV9tYWNoaW5lL1N0YW5kaW5nU3RhdGUnKTtcbiAgICB2YXIgd2Fsa2luZ1N0YXRlID0gcmVxdWlyZSgnLi8uLi9zdGF0ZV9tYWNoaW5lL1dhbGtpbmdTdGF0ZScpO1xuICAgIHZhciBqdW1waW5nU3RhdGUgPSByZXF1aXJlKCcuLy4uL3N0YXRlX21hY2hpbmUvSnVtcGluZ1N0YXRlJyk7XG4gICAgdGhpcy5zdGF0ZV9tYWNoaW5lID0gbmV3IHN0YXRlTWFjaGluZSgpO1xuICAgIHRoaXMuc3RhdGVfbWFjaGluZS5hZGRfc3RhdGUoXCJzdGFuZGluZ1wiLCBuZXcgc3RhbmRpbmdTdGF0ZShcInN0YW5kaW5nXCIsIHRoaXMsIDMpKTtcbiAgICB0aGlzLnN0YXRlX21hY2hpbmUuYWRkX3N0YXRlKFwid2Fsa2luZ19sZWZ0XCIsIG5ldyB3YWxraW5nU3RhdGUoXCJ3YWxraW5nX2xlZnRcIiwgdGhpcywgLTEsIHRoaXMud2Fsa2luZ19zcGVlZCkpO1xuICAgIHRoaXMuc3RhdGVfbWFjaGluZS5hZGRfc3RhdGUoXCJ3YWxraW5nX3JpZ2h0XCIsIG5ldyB3YWxraW5nU3RhdGUoXCJ3YWxraW5nX2xlZnRcIiwgdGhpcywgMSwgdGhpcy53YWxraW5nX3NwZWVkKSk7XG4gICAgdGhpcy5zdGF0ZV9tYWNoaW5lLmFkZF9zdGF0ZShcImp1bXBpbmdcIiwgbmV3IGp1bXBpbmdTdGF0ZShcImp1bXBpbmdcIiwgdGhpcywgdGhpcy5qdW1waW5nX3NwZWVkKSk7XG4gICAgdGhpcy5zdGF0ZV9tYWNoaW5lLnNldF9pbml0aWFsX3N0YXRlKFwic3RhbmRpbmdcIik7XG4gICAgXG4gICAgLy8gYWRkIGNhbGxiYWNrcyB0byBrZXlib2FyZCBldmVudHNcbiAgICB0aGlzLmdhbWVfc3RhdGUuZ2FtZS5pbnB1dC5rZXlib2FyZC5hZGRDYWxsYmFja3ModGhpcywgdGhpcy5wcm9jZXNzX29uX2Rvd25faW5wdXQsIHRoaXMucHJvY2Vzc19vbl91cF9pbnB1dCwgbnVsbCk7XG59O1xuXG5IZXJvLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnLi9QcmVmYWInKS5wcm90b3R5cGUpO1xuSGVyby5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBIZXJvO1xuXG5IZXJvLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdGhpcy5nYW1lX3N0YXRlLmdhbWUucGh5c2ljcy5hcmNhZGUuY29sbGlkZSh0aGlzLCB0aGlzLmdhbWVfc3RhdGUubGF5ZXJzLmNvbGxpc2lvbik7XG4gICAgXG4gICAgLy8gdG91Y2hpbmcgZ3JvdW5kIHRpbGVcbiAgICBpZiAodGhpcy5ib2R5LmJsb2NrZWQuZG93bikge1xuICAgICAgICB2YXIgY29tbWFuZCA9IHJlcXVpcmUoJy4vLi4vc3RhdGVfbWFjaGluZS9Db21tYW5kJyk7XG4gICAgICAgIHRoaXMuc3RhdGVfbWFjaGluZS5oYW5kbGVfaW5wdXQobmV3IGNvbW1hbmQoXCJmYWxsXCIsIHt9KSk7XG4gICAgfVxufTtcblxuSGVyby5wcm90b3R5cGUucHJvY2Vzc19vbl9kb3duX2lucHV0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGNvbW1hbmQgPSByZXF1aXJlKCcuLy4uL3N0YXRlX21hY2hpbmUvQ29tbWFuZCcpO1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgIGNhc2UgUGhhc2VyLktleWJvYXJkLkxFRlQ6XG4gICAgICAgIC8vIHdhbGsgbGVmdFxuICAgICAgICB0aGlzLnN0YXRlX21hY2hpbmUuaGFuZGxlX2lucHV0KG5ldyBjb21tYW5kKFwid2Fsa1wiLCB7ZGlyZWN0aW9uOiBcImxlZnRcIn0pKTtcbiAgICAgICAgYnJlYWs7XG4gICAgY2FzZSBQaGFzZXIuS2V5Ym9hcmQuUklHSFQ6XG4gICAgICAgIC8vIHdhbGsgcmlnaHRcbiAgICAgICAgdGhpcy5zdGF0ZV9tYWNoaW5lLmhhbmRsZV9pbnB1dChuZXcgY29tbWFuZChcIndhbGtcIiwge2RpcmVjdGlvbjogXCJyaWdodFwifSkpO1xuICAgICAgICBicmVhaztcbiAgICBjYXNlIFBoYXNlci5LZXlib2FyZC5VUDpcbiAgICAgICAgLy8ganVtcFxuICAgICAgICB0aGlzLnN0YXRlX21hY2hpbmUuaGFuZGxlX2lucHV0KG5ldyBjb21tYW5kKFwianVtcFwiLCB7fSkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG59O1xuXG5IZXJvLnByb3RvdHlwZS5wcm9jZXNzX29uX3VwX2lucHV0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGNvbW1hbmQgPSByZXF1aXJlKCcuLy4uL3N0YXRlX21hY2hpbmUvQ29tbWFuZCcpO1xuICAgIHN3aXRjaCAoZXZlbnQua2V5Q29kZSkge1xuICAgIGNhc2UgUGhhc2VyLktleWJvYXJkLkxFRlQ6XG4gICAgICAgIHRoaXMuc3RhdGVfbWFjaGluZS5oYW5kbGVfaW5wdXQobmV3IGNvbW1hbmQoXCJzdG9wXCIsIHt9KSk7XG4gICAgICAgIGJyZWFrO1xuICAgIGNhc2UgUGhhc2VyLktleWJvYXJkLlJJR0hUOlxuICAgICAgICB0aGlzLnN0YXRlX21hY2hpbmUuaGFuZGxlX2lucHV0KG5ldyBjb21tYW5kKFwic3RvcFwiLCB7fSkpO1xuICAgICAgICBicmVhaztcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhlcm87IiwidmFyIFByZWZhYiA9IGZ1bmN0aW9uIChnYW1lX3N0YXRlLCBuYW1lLCBwb3NpdGlvbiwgcHJvcGVydGllcykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFBoYXNlci5TcHJpdGUuY2FsbCh0aGlzLCBnYW1lX3N0YXRlLmdhbWUsIHBvc2l0aW9uLngsIHBvc2l0aW9uLnksIHByb3BlcnRpZXMudGV4dHVyZSk7XG4gICAgXG4gICAgdGhpcy5nYW1lX3N0YXRlID0gZ2FtZV9zdGF0ZTtcbiAgICBcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIFxuICAgIHRoaXMuZ2FtZV9zdGF0ZS5ncm91cHNbcHJvcGVydGllcy5ncm91cF0uYWRkKHRoaXMpO1xuICAgIHRoaXMuZnJhbWUgPSArcHJvcGVydGllcy5mcmFtZTtcbiAgICBcbiAgICBpZiAocHJvcGVydGllcy5zY2FsZSkge1xuICAgICAgICB0aGlzLnNjYWxlLnNldFRvKHByb3BlcnRpZXMuc2NhbGUueCwgcHJvcGVydGllcy5zY2FsZS55KTtcbiAgICB9XG4gICAgXG4gICAgdGhpcy5nYW1lX3N0YXRlLnByZWZhYnNbbmFtZV0gPSB0aGlzO1xufTtcblxuUHJlZmFiLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUGhhc2VyLlNwcml0ZS5wcm90b3R5cGUpO1xuUHJlZmFiLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFByZWZhYjtcblxubW9kdWxlLmV4cG9ydHMgPSBQcmVmYWI7IiwidmFyIENvbW1hbmQgPSBmdW5jdGlvbiAobmFtZSwgcHJvcGVydGllcykge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgZm9yICh2YXIgcHJvcGVydHkgaW4gcHJvcGVydGllcykge1xuICAgICAgICBpZiAocHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHRoaXNbcHJvcGVydHldID0gcHJvcGVydGllc1twcm9wZXJ0eV07XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbW1hbmQ7XG4iLCJ2YXIgSnVtcGluZ1N0YXRlID0gZnVuY3Rpb24gKG5hbWUsIHByZWZhYiwganVtcGluZ19zcGVlZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHJlcXVpcmUoJy4vU3RhdGUnKS5jYWxsKHRoaXMsIG5hbWUsIHByZWZhYik7XG4gICAgdGhpcy5qdW1waW5nX3NwZWVkID0ganVtcGluZ19zcGVlZDtcbn07XG5cbkp1bXBpbmdTdGF0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJy4vU3RhdGUnKS5wcm90b3R5cGUpO1xuSnVtcGluZ1N0YXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEp1bXBpbmdTdGF0ZTtcblxuSnVtcGluZ1N0YXRlLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBzZXQgdmVydGljYWwgdmVsb2NpdHlcbiAgICB0aGlzLnByZWZhYi5ib2R5LnZlbG9jaXR5LnkgPSAtdGhpcy5qdW1waW5nX3NwZWVkO1xufTtcblxuSnVtcGluZ1N0YXRlLnByb3RvdHlwZS5oYW5kbGVfaW5wdXQgPSBmdW5jdGlvbiAoY29tbWFuZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHN3aXRjaCAoY29tbWFuZC5uYW1lKSB7XG4gICAgY2FzZSBcImZhbGxcIjpcbiAgICAgICAgcmV0dXJuIFwic3RhbmRpbmdcIjtcbiAgICB9XG4gICAgcmVxdWlyZSgnLi9TdGF0ZScpLnByb3RvdHlwZS5oYW5kbGVfaW5wdXQuY2FsbCh0aGlzLCBjb21tYW5kKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzPSBKdW1waW5nU3RhdGU7IiwidmFyIFN0YW5kaW5nU3RhdGUgPSBmdW5jdGlvbiAobmFtZSwgcHJlZmFiLCBmcmFtZSkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHJlcXVpcmUoJy4vU3RhdGUnKS5jYWxsKHRoaXMsIG5hbWUsIHByZWZhYik7XG4gICAgdGhpcy5mcmFtZSA9IGZyYW1lO1xufTtcblxuU3RhbmRpbmdTdGF0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHJlcXVpcmUoJy4vU3RhdGUnKS5wcm90b3R5cGUpO1xuU3RhbmRpbmdTdGF0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdGFuZGluZ1N0YXRlO1xuXG5TdGFuZGluZ1N0YXRlLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICAvLyBzZXQgc3RhbmRpbmcgZnJhbWUgYW5kIHZlbG9jaXR5IHRvIDBcbiAgICB0aGlzLnByZWZhYi5mcmFtZSA9IHRoaXMuZnJhbWU7XG4gICAgdGhpcy5wcmVmYWIuYm9keS52ZWxvY2l0eS54ID0gMDtcbn07XG5cblN0YW5kaW5nU3RhdGUucHJvdG90eXBlLmhhbmRsZV9pbnB1dCA9IGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgc3dpdGNoIChjb21tYW5kLm5hbWUpIHtcbiAgICBjYXNlIFwid2Fsa1wiOlxuICAgICAgICBpZiAoY29tbWFuZC5kaXJlY3Rpb24gPT09IFwibGVmdFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJ3YWxraW5nX2xlZnRcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIndhbGtpbmdfcmlnaHRcIjtcbiAgICAgICAgfVxuICAgIGNhc2UgXCJqdW1wXCI6XG4gICAgICAgIHJldHVybiBcImp1bXBpbmdcIjtcbiAgICB9XG4gICAgcmVxdWlyZSgnLi9TdGF0ZScpLnByb3RvdHlwZS5oYW5kbGVfaW5wdXQuY2FsbCh0aGlzLCBjb21tYW5kKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhbmRpbmdTdGF0ZTsiLCJ2YXIgU3RhdGUgPSBmdW5jdGlvbiAobmFtZSwgcHJlZmFiKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICB0aGlzLnByZWZhYiA9IHByZWZhYjtcbn07XG5cblN0YXRlLnByb3RvdHlwZS5lbnRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbn07XG5cblN0YXRlLnByb3RvdHlwZS5leGl0ID0gZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xufTtcblxuU3RhdGUucHJvdG90eXBlLmhhbmRsZV9pbnB1dCA9IGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgcmV0dXJuIHRoaXMubmFtZTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gU3RhdGU7IiwidmFyIFN0YXRlTWFjaGluZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB0aGlzLnN0YXRlcyA9IHt9O1xufTtcblxuU3RhdGVNYWNoaW5lLnByb3RvdHlwZS5hZGRfc3RhdGUgPSBmdW5jdGlvbiAoc3RhdGVfbmFtZSwgc3RhdGUpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB0aGlzLnN0YXRlc1tzdGF0ZV9uYW1lXSA9IHN0YXRlO1xufTtcblxuU3RhdGVNYWNoaW5lLnByb3RvdHlwZS5zZXRfaW5pdGlhbF9zdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZV9uYW1lKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdGhpcy5jdXJyZW50X3N0YXRlID0gdGhpcy5zdGF0ZXNbc3RhdGVfbmFtZV07XG4gICAgdGhpcy5jdXJyZW50X3N0YXRlLmVudGVyKCk7XG59O1xuXG5TdGF0ZU1hY2hpbmUucHJvdG90eXBlLmhhbmRsZV9pbnB1dCA9IGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIG5leHRfc3RhdGUgPSB0aGlzLmN1cnJlbnRfc3RhdGUuaGFuZGxlX2lucHV0KGNvbW1hbmQpO1xuICAgIGlmIChuZXh0X3N0YXRlICYmIG5leHRfc3RhdGUgIT09IHRoaXMuY3VycmVudF9zdGF0ZS5uYW1lKSB7XG4gICAgICAgIHRoaXMuY3VycmVudF9zdGF0ZS5leGl0KCk7XG4gICAgICAgIHRoaXMuY3VycmVudF9zdGF0ZSA9IHRoaXMuc3RhdGVzW25leHRfc3RhdGVdO1xuICAgICAgICB0aGlzLmN1cnJlbnRfc3RhdGUuZW50ZXIoKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN0YXRlTWFjaGluZTtcbiIsInZhciBXYWxraW5nU3RhdGUgPSBmdW5jdGlvbiAobmFtZSwgcHJlZmFiLCBkaXJlY3Rpb24sIHdhbGtpbmdfc3BlZWQpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICByZXF1aXJlKCcuL1N0YXRlJykuY2FsbCh0aGlzLCBuYW1lLCBwcmVmYWIpO1xuICAgIFxuICAgIHRoaXMud2Fsa2luZ19hbmltYXRpb24gPSB0aGlzLnByZWZhYi5hbmltYXRpb25zLmFkZChcIndhbGtpbmdcIiwgWzAsIDEsIDIsIDFdLCA2LCB0cnVlKTtcbiAgICBcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICB0aGlzLndhbGtpbmdfc3BlZWQgPSB3YWxraW5nX3NwZWVkO1xufTtcblxuV2Fsa2luZ1N0YXRlLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUocmVxdWlyZSgnLi9TdGF0ZScpLnByb3RvdHlwZSk7XG5XYWxraW5nU3RhdGUucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gV2Fsa2luZ1N0YXRlO1xuXG5XYWxraW5nU3RhdGUucHJvdG90eXBlLmVudGVyID0gZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIC8vIHN0YXJ0IGFuaW1hdGlvbiBhbmQgc2V0IHZlbG9jaXR5XG4gICAgdGhpcy53YWxraW5nX2FuaW1hdGlvbi5wbGF5KCk7XG4gICAgdGhpcy5wcmVmYWIuYm9keS52ZWxvY2l0eS54ID0gdGhpcy5kaXJlY3Rpb24gKiB0aGlzLndhbGtpbmdfc3BlZWQ7XG4gICAgXG4gICAgaWYgKHRoaXMuZGlyZWN0aW9uID09PSAxKSB7XG4gICAgICAgIHRoaXMucHJlZmFiLnNjYWxlLnNldFRvKC0xLCAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnByZWZhYi5zY2FsZS5zZXRUbygxLCAxKTtcbiAgICB9XG59O1xuXG5XYWxraW5nU3RhdGUucHJvdG90eXBlLmV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgLy8gc3RvcCBhbmltYXRpb24gYW5kIHNldCB2ZWxvY2l0eSB0byB6ZXJvXG4gICAgdGhpcy53YWxraW5nX2FuaW1hdGlvbi5zdG9wKCk7XG59O1xuXG5XYWxraW5nU3RhdGUucHJvdG90eXBlLmhhbmRsZV9pbnB1dCA9IGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgc3dpdGNoIChjb21tYW5kLm5hbWUpIHtcbiAgICBjYXNlIFwic3RvcFwiOlxuICAgICAgICByZXR1cm4gXCJzdGFuZGluZ1wiO1xuICAgIGNhc2UgXCJqdW1wXCI6XG4gICAgICAgIHJldHVybiBcImp1bXBpbmdcIjtcbiAgICB9XG4gICAgcmVxdWlyZSgnLi9TdGF0ZScpLnByb3RvdHlwZS5oYW5kbGVfaW5wdXQuY2FsbCh0aGlzLCBjb21tYW5kKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV2Fsa2luZ1N0YXRlOyIsInZhciBCb290U3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgUGhhc2VyLlN0YXRlLmNhbGwodGhpcyk7XG59O1xuXG5Cb290U3RhdGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuU3RhdGUucHJvdG90eXBlKTtcbkJvb3RTdGF0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCb290U3RhdGU7XG5cbkJvb3RTdGF0ZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChsZXZlbF9maWxlLCBuZXh0X3N0YXRlKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdGhpcy5sZXZlbF9maWxlID0gbGV2ZWxfZmlsZTtcbiAgICB0aGlzLm5leHRfc3RhdGUgPSBuZXh0X3N0YXRlO1xufTtcblxuQm9vdFN0YXRlLnByb3RvdHlwZS5wcmVsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHRoaXMubG9hZC50ZXh0KFwibGV2ZWwxXCIsIHRoaXMubGV2ZWxfZmlsZSk7XG59O1xuXG5Cb290U3RhdGUucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB2YXIgbGV2ZWxfdGV4dCA9IHRoaXMuZ2FtZS5jYWNoZS5nZXRUZXh0KFwibGV2ZWwxXCIpO1xuICAgIHZhciBsZXZlbF9kYXRhID0gSlNPTi5wYXJzZShsZXZlbF90ZXh0KTtcbiAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoXCJMb2FkaW5nU3RhdGVcIiwgdHJ1ZSwgZmFsc2UsIGxldmVsX2RhdGEsIHRoaXMubmV4dF9zdGF0ZSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvb3RTdGF0ZTsiLCJ2YXIgRGVtb1N0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIFBoYXNlci5TdGF0ZS5jYWxsKHRoaXMpO1xuICAgIFxuICAgIHRoaXMucHJlZmFiX2NsYXNzZXMgPSB7XG4gICAgICAgIFwiaGVyb1wiOiByZXF1aXJlKCcuLy4uL3ByZWZhYnMvSGVybycpLnByb3RvdHlwZS5jb25zdHJ1Y3RvclxuICAgIH07XG59O1xuXG5EZW1vU3RhdGUucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShQaGFzZXIuU3RhdGUucHJvdG90eXBlKTtcbkRlbW9TdGF0ZS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBEZW1vU3RhdGU7XG5cbkRlbW9TdGF0ZS5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChsZXZlbF9kYXRhKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIHRpbGVzZXRfaW5kZXgsIHRpbGVfZGltZW5zaW9ucztcbiAgICB0aGlzLmxldmVsX2RhdGEgPSB0aGlzLmxldmVsX2RhdGEgfHwgbGV2ZWxfZGF0YTtcbiAgICBcbiAgICB0aGlzLnNjYWxlLnNjYWxlTW9kZSA9IFBoYXNlci5TY2FsZU1hbmFnZXIuU0hPV19BTEw7XG4gICAgdGhpcy5zY2FsZS5wYWdlQWxpZ25Ib3Jpem9udGFsbHkgPSB0cnVlO1xuICAgIHRoaXMuc2NhbGUucGFnZUFsaWduVmVydGljYWxseSA9IHRydWU7XG4gICAgXG4gICAgLy8gc3RhcnQgcGh5c2ljcyBzeXN0ZW1cbiAgICB0aGlzLmdhbWUucGh5c2ljcy5zdGFydFN5c3RlbShQaGFzZXIuUGh5c2ljcy5BUkNBREUpO1xuICAgIHRoaXMuZ2FtZS5waHlzaWNzLmFyY2FkZS5ncmF2aXR5LnkgPSAxMDAwO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBtYXAgYW5kIHNldCB0aWxlc2V0XG4gICAgdGhpcy5tYXAgPSB0aGlzLmdhbWUuYWRkLnRpbGVtYXAodGhpcy5sZXZlbF9kYXRhLm1hcC5rZXkpO1xuICAgIHRpbGVzZXRfaW5kZXggPSAwO1xuICAgIHRoaXMubWFwLnRpbGVzZXRzLmZvckVhY2goZnVuY3Rpb24gKHRpbGVzZXQpIHtcbiAgICAgICAgdGhpcy5tYXAuYWRkVGlsZXNldEltYWdlKHRpbGVzZXQubmFtZSwgdGhpcy5sZXZlbF9kYXRhLm1hcC50aWxlc2V0c1t0aWxlc2V0X2luZGV4XSk7XG4gICAgICAgIHRpbGVzZXRfaW5kZXggKz0gMTtcbiAgICB9LCB0aGlzKTtcbn07XG5cbkRlbW9TdGF0ZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBncm91cF9uYW1lLCBvYmplY3RfbGF5ZXIsIGNvbGxpc2lvbl90aWxlcztcbiAgICBcbiAgICAvLyBjcmVhdGUgbWFwIGxheWVyc1xuICAgIHRoaXMubGF5ZXJzID0ge307XG4gICAgdGhpcy5tYXAubGF5ZXJzLmZvckVhY2goZnVuY3Rpb24gKGxheWVyKSB7XG4gICAgICAgIHRoaXMubGF5ZXJzW2xheWVyLm5hbWVdID0gdGhpcy5tYXAuY3JlYXRlTGF5ZXIobGF5ZXIubmFtZSk7XG4gICAgICAgIGlmIChsYXllci5wcm9wZXJ0aWVzLmNvbGxpc2lvbikgeyAvLyBjb2xsaXNpb24gbGF5ZXJcbiAgICAgICAgICAgIGNvbGxpc2lvbl90aWxlcyA9IFtdO1xuICAgICAgICAgICAgbGF5ZXIuZGF0YS5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhX3JvdykgeyAvLyBmaW5kIHRpbGVzIHVzZWQgaW4gdGhlIGxheWVyXG4gICAgICAgICAgICAgICAgZGF0YV9yb3cuZm9yRWFjaChmdW5jdGlvbiAodGlsZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBpdCdzIGEgdmFsaWQgdGlsZSBpbmRleCBhbmQgaXNuJ3QgYWxyZWFkeSBpbiB0aGUgbGlzdFxuICAgICAgICAgICAgICAgICAgICBpZiAodGlsZS5pbmRleCA+IDAgJiYgY29sbGlzaW9uX3RpbGVzLmluZGV4T2YodGlsZS5pbmRleCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25fdGlsZXMucHVzaCh0aWxlLmluZGV4KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xuICAgICAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXRDb2xsaXNpb24oY29sbGlzaW9uX3RpbGVzLCB0cnVlLCBsYXllci5uYW1lKTtcbiAgICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICAgIC8vIHJlc2l6ZSB0aGUgd29ybGQgdG8gYmUgdGhlIHNpemUgb2YgdGhlIGN1cnJlbnQgbGF5ZXJcbiAgICB0aGlzLmxheWVyc1t0aGlzLm1hcC5sYXllci5uYW1lXS5yZXNpemVXb3JsZCgpO1xuICAgIFxuICAgIC8vIGNyZWF0ZSBncm91cHNcbiAgICB0aGlzLmdyb3VwcyA9IHt9O1xuICAgIHRoaXMubGV2ZWxfZGF0YS5ncm91cHMuZm9yRWFjaChmdW5jdGlvbiAoZ3JvdXBfbmFtZSkge1xuICAgICAgICB0aGlzLmdyb3Vwc1tncm91cF9uYW1lXSA9IHRoaXMuZ2FtZS5hZGQuZ3JvdXAoKTtcbiAgICB9LCB0aGlzKTtcbiAgICBcbiAgICB0aGlzLnByZWZhYnMgPSB7fTtcbiAgICBcbiAgICBmb3IgKG9iamVjdF9sYXllciBpbiB0aGlzLm1hcC5vYmplY3RzKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcC5vYmplY3RzLmhhc093blByb3BlcnR5KG9iamVjdF9sYXllcikpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSBsYXllciBvYmplY3RzXG4gICAgICAgICAgICB0aGlzLm1hcC5vYmplY3RzW29iamVjdF9sYXllcl0uZm9yRWFjaCh0aGlzLmNyZWF0ZV9vYmplY3QsIHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuRGVtb1N0YXRlLnByb3RvdHlwZS5jcmVhdGVfb2JqZWN0ID0gZnVuY3Rpb24gKG9iamVjdCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHZhciBvYmplY3RfeSwgcG9zaXRpb24sIHByZWZhYjtcbiAgICAvLyB0aWxlZCBjb29yZGluYXRlcyBzdGFydHMgaW4gdGhlIGJvdHRvbSBsZWZ0IGNvcm5lclxuICAgIG9iamVjdF95ID0gKG9iamVjdC5naWQpID8gb2JqZWN0LnkgLSAodGhpcy5tYXAudGlsZUhlaWdodCAvIDIpIDogb2JqZWN0LnkgKyAob2JqZWN0LmhlaWdodCAvIDIpO1xuICAgIHBvc2l0aW9uID0ge1wieFwiOiBvYmplY3QueCArICh0aGlzLm1hcC50aWxlSGVpZ2h0IC8gMiksIFwieVwiOiBvYmplY3RfeX07XG4gICAgLy8gY3JlYXRlIG9iamVjdCBhY2NvcmRpbmcgdG8gaXRzIHR5cGVcbiAgICBpZiAodGhpcy5wcmVmYWJfY2xhc3Nlcy5oYXNPd25Qcm9wZXJ0eShvYmplY3QudHlwZSkpIHtcbiAgICAgICAgcHJlZmFiID0gbmV3IHRoaXMucHJlZmFiX2NsYXNzZXNbb2JqZWN0LnR5cGVdKHRoaXMsIG9iamVjdC5uYW1lLCBwb3NpdGlvbiwgb2JqZWN0LnByb3BlcnRpZXMpO1xuICAgIH1cbiAgICB0aGlzLnByZWZhYnNbb2JqZWN0Lm5hbWVdID0gcHJlZmFiO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBEZW1vU3RhdGU7IiwidmFyIExvYWRpbmdTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICBQaGFzZXIuU3RhdGUuY2FsbCh0aGlzKTtcbn07XG5cbkxvYWRpbmdTdGF0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFBoYXNlci5TdGF0ZS5wcm90b3R5cGUpO1xuTG9hZGluZ1N0YXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExvYWRpbmdTdGF0ZTtcblxuTG9hZGluZ1N0YXRlLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGxldmVsX2RhdGEsIG5leHRfc3RhdGUpIHtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICB0aGlzLmxldmVsX2RhdGEgPSBsZXZlbF9kYXRhO1xuICAgIHRoaXMubmV4dF9zdGF0ZSA9IG5leHRfc3RhdGU7XG59O1xuXG5Mb2FkaW5nU3RhdGUucHJvdG90eXBlLnByZWxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG4gICAgdmFyIGFzc2V0cywgYXNzZXRfbG9hZGVyLCBhc3NldF9rZXksIGFzc2V0O1xuICAgIGFzc2V0cyA9IHRoaXMubGV2ZWxfZGF0YS5hc3NldHM7XG4gICAgZm9yIChhc3NldF9rZXkgaW4gYXNzZXRzKSB7IC8vIGxvYWQgYXNzZXRzIGFjY29yZGluZyB0byBhc3NldCBrZXlcbiAgICAgICAgaWYgKGFzc2V0cy5oYXNPd25Qcm9wZXJ0eShhc3NldF9rZXkpKSB7XG4gICAgICAgICAgICBhc3NldCA9IGFzc2V0c1thc3NldF9rZXldO1xuICAgICAgICAgICAgc3dpdGNoIChhc3NldC50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoYXNzZXRfa2V5LCBhc3NldC5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBcInNwcml0ZXNoZWV0XCI6XG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KGFzc2V0X2tleSwgYXNzZXQuc291cmNlLCBhc3NldC5mcmFtZV93aWR0aCwgYXNzZXQuZnJhbWVfaGVpZ2h0LCBhc3NldC5mcmFtZXMsIGFzc2V0Lm1hcmdpbiwgYXNzZXQuc3BhY2luZyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFwidGlsZW1hcFwiOlxuICAgICAgICAgICAgICAgIHRoaXMubG9hZC50aWxlbWFwKGFzc2V0X2tleSwgYXNzZXQuc291cmNlLCBudWxsLCBQaGFzZXIuVGlsZW1hcC5USUxFRF9KU09OKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbkxvYWRpbmdTdGF0ZS5wcm90b3R5cGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuICAgIHRoaXMuZ2FtZS5zdGF0ZS5zdGFydCh0aGlzLm5leHRfc3RhdGUsIHRydWUsIGZhbHNlLCB0aGlzLmxldmVsX2RhdGEpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBMb2FkaW5nU3RhdGU7Il19
