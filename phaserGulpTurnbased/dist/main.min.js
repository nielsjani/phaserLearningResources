(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"d:\\phaserGulpTurnbased\\src\\js\\main.js":[function(require,module,exports){
var RPG = RPG || {};

RPG.game = new Phaser.Game(320, 320, Phaser.CANVAS);
RPG.game.state.add("BootState", require('./states/BootState'));
RPG.game.state.add("LoadingState", require('./states/LoadingState'));
RPG.game.state.add("WorldState", require('./states/WorldState'));
RPG.game.state.add("BattleState", require('./states/BattleState'));
RPG.game.state.start("BootState", true, false, "assets/levels/level1.json", "WorldState", {});
},{"./states/BattleState":"d:\\phaserGulpTurnbased\\src\\js\\states\\BattleState.js","./states/BootState":"d:\\phaserGulpTurnbased\\src\\js\\states\\BootState.js","./states/LoadingState":"d:\\phaserGulpTurnbased\\src\\js\\states\\LoadingState.js","./states/WorldState":"d:\\phaserGulpTurnbased\\src\\js\\states\\WorldState.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ActionMessage.js":[function(require,module,exports){
var ActionMessage = function () {};


ActionMessage = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);
    
    this.anchor.setTo(0.5);
    
    // create message text
    var textPrefab = require('./../TextPrefab');
    this.message_text = new textPrefab(this.game_state, this.name + "_message", position, {group: "hud", text: properties.message, style: Object.create(this.game_state.TEXT_STYLE)});
    this.message_text.anchor.setTo(0.5);
    
    // start timer to destroy the message
    this.kill_timer = this.game_state.game.time.create();
    this.kill_timer.add(Phaser.Timer.SECOND * properties.duration, this.kill, this);
    this.kill_timer.start();
};

ActionMessage.prototype = Object.create(require('./../Prefab').prototype);
ActionMessage.prototype.constructor = ActionMessage;

ActionMessage.prototype.kill = function () {
    "use strict";
    Phaser.Sprite.prototype.kill.call(this);
    // when the message is destroyed, call next turn
    this.message_text.kill();
    this.game_state.next_turn();
};
module.exports = ActionMessage;

},{"./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js","./../TextPrefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\TextPrefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\AttackMenuItem.js":[function(require,module,exports){
var AttackMenuItem = function (game_state, name, position, properties) {
    "use strict";
    require('./MenuItem').call(this, game_state, name, position, properties);
};

AttackMenuItem.prototype = Object.create(require('./MenuItem').prototype);
AttackMenuItem.prototype.constructor = AttackMenuItem;

AttackMenuItem.prototype.select = function () {
    "use strict";
    // disable actions menu
    this.game_state.prefabs.actions_menu.disable();
    // enable enemy units menu so the player can choose the target
    this.game_state.prefabs.enemy_units_menu.enable();
    // save current attack
    var physicalAttack = require('./../Units/PhysicalAttack');
    this.game_state.current_attack = new physicalAttack(this.game_state, this.game_state.current_unit.name + "_attack", {x: 0, y: 0}, {group: "attacks", owner_name: this.game_state.current_unit.name});

};

module.exports = AttackMenuItem;

},{"./../Units/PhysicalAttack":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\PhysicalAttack.js","./MenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\EnemyMenuItem.js":[function(require,module,exports){
var EnemyMenuItem = function () {};


EnemyMenuItem = function (game_state, name, position, properties) {
    "use strict";
    require('./MenuItem').call(this, game_state, name, position, properties);
};

EnemyMenuItem.prototype = Object.create(require('./MenuItem').prototype);
EnemyMenuItem.prototype.constructor = EnemyMenuItem;

EnemyMenuItem.prototype.select = function () {
    "use strict";
    var enemy;
    // get enemy prefab
    enemy = this.game_state.prefabs[this.text];
    // attack selected enemy
    this.game_state.current_unit.attack(enemy);
    // disable menus
    this.game_state.prefabs.enemy_units_menu.disable();
    this.game_state.prefabs.player_units_menu.disable();
};

module.exports = EnemyMenuItem;

},{"./MenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\InventoryMenuItem.js":[function(require,module,exports){
var InventoryMenuItem = function (game_state, name, position, properties) {
    "use strict";
    require('./MenuItem').call(this, game_state, name, position, properties);
};

InventoryMenuItem.prototype = Object.create(require('./MenuItem').prototype);
InventoryMenuItem.prototype.constructor = InventoryMenuItem;

InventoryMenuItem.prototype.select = function () {
    "use strict";
    // select only if there are remaining items
    if (this.game_state.prefabs.inventory.items.length > 0) {
        // disable actions menu
        this.game_state.prefabs.actions_menu.disable();
        this.game_state.prefabs.actions_menu.hide();
        // enable enemy units menu so the player can choose the target
        this.game_state.prefabs.items_menu.show();
        this.game_state.prefabs.items_menu.enable();
    }
};

module.exports = InventoryMenuItem;
},{"./MenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ItemMenuItem.js":[function(require,module,exports){
var ItemMenuItem = function (game_state, name, position, properties) {
    "use strict";
    require('./MenuItem').call(this, game_state, name, position, properties);
};

ItemMenuItem.prototype = Object.create(require('./MenuItem').prototype);
ItemMenuItem.prototype.constructor = ItemMenuItem;

ItemMenuItem.prototype.select = function () {
    "use strict";
    // disable actions menu
    this.game_state.prefabs.items_menu.disable();
    // enable player units menu so the player can choose the target
    this.game_state.prefabs.player_units_menu.enable();
    // save selected item
    this.game_state.current_item = this.text;
};

module.exports = ItemMenuItem;
},{"./MenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MagicAttackMenuItem.js":[function(require,module,exports){
var MagicAttackMenuItem = function (game_state, name, position, properties) {
    "use strict";
    require('./MenuItem').call(this, game_state, name, position, properties);
    
    this.MANA_COST = 10;
};

MagicAttackMenuItem.prototype = Object.create(require('./MenuItem').prototype);
MagicAttackMenuItem.prototype.constructor = MagicAttackMenuItem;

MagicAttackMenuItem.prototype.select = function () {
    "use strict";
    // use only if the current unit has enough mana
    if (this.game_state.current_unit.stats.mana >= this.MANA_COST) {
        // disable actions menu
        this.game_state.prefabs.actions_menu.disable();
        // enable enemy units menu so the player can choose the target
        this.game_state.prefabs.enemy_units_menu.enable();
        // save current attack
        var MagicAttack = require('./../Units/MagicAttack');
        this.game_state.current_attack = new MagicAttack(this.game_state, this.game_state.current_unit.name + "_attack", {x: 0, y: 0}, {group: "attacks", mana_cost: this.MANA_COST, owner_name: this.game_state.current_unit.name});
    }
};

module.exports = MagicAttackMenuItem;
},{"./../Units/MagicAttack":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\MagicAttack.js","./MenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\Menu.js":[function(require,module,exports){
var Menu = function () {};


Menu = function (game_state, name, position, properties) {
    "use strict";
    var live_index, life;
    require('./../Prefab').call(this, game_state, name, position, properties);
    
    this.visible = false;
    
    this.menu_items = properties.menu_items;
    
    this.current_item_index = 0;
};

Menu.prototype = Object.create(require('./../Prefab').prototype);
Menu.prototype.constructor = Menu;

Menu.prototype.process_input = function (event) {
    "use strict";
    switch (event.keyCode) {
    case Phaser.Keyboard.UP:
        if (this.current_item_index > 0) {
            // navigate to previous item
            this.move_selection(this.current_item_index - 1);
        }
        break;
    case Phaser.Keyboard.DOWN:
        if (this.current_item_index < this.menu_items.length - 1) {
            // navigate to next item
            this.move_selection(this.current_item_index + 1);
        }
        break;
    case Phaser.Keyboard.SPACEBAR:
        this.menu_items[this.current_item_index].select();
        break;
    }
};

Menu.prototype.move_selection = function (item_index) {
    "use strict";
    this.menu_items[this.current_item_index].selection_out();
    this.current_item_index = item_index;
    this.menu_items[this.current_item_index].selection_over();
};

Menu.prototype.find_item_index = function (text) {
    "use strict";
    var item_index;
    for (item_index = 0; item_index < this.menu_items.length; item_index += 1) {
        if (this.menu_items[item_index].text === text) {
            return item_index;
        }
    }
};

Menu.prototype.remove_item = function (index) {
    "use strict";
    var menu_item;
    menu_item = this.menu_items[index];
    // remove menu item
    this.menu_items.splice(index, 1);
    // update current_item_index if necessary
    if (this.current_item_index === index) {
        this.current_item_index = 0;
    }
    return menu_item;
};

Menu.prototype.enable = function () {
    "use strict";
    this.current_item_index = 0;
    if (this.menu_items.length > 0) {
        this.menu_items[this.current_item_index].selection_over();
    }
    this.game_state.game.input.keyboard.addCallbacks(this, this.process_input);
};

Menu.prototype.disable = function () {
    "use strict";
    if (this.menu_items.length > 0) {
        this.menu_items[this.current_item_index].selection_out();
    }
    this.current_item_index = 0;
};

Menu.prototype.show = function () {
    "use strict";
    this.menu_items.forEach(function (menu_item) {
        menu_item.visible = true;
    }, this);
};

Menu.prototype.hide = function () {
    "use strict";
    this.menu_items.forEach(function (menu_item) {
        menu_item.visible = false;
    }, this);
};

module.exports = Menu;

},{"./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js":[function(require,module,exports){
var MenuItem = function (game_state, name, position, properties) {
    "use strict";
    require('./../TextPrefab').call(this, game_state, name, position, properties);
};

MenuItem.prototype = Object.create(require('./../TextPrefab').prototype);
MenuItem.prototype.constructor = MenuItem;

MenuItem.prototype.selection_over = function () {
    "use strict";
    this.fill = "#FFFF00";
};

MenuItem.prototype.selection_out = function () {
    "use strict";
    this.fill = "#FFFFFF";
};

module.exports = MenuItem;

},{"./../TextPrefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\TextPrefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\PlayerMenuItem.js":[function(require,module,exports){
var PlayerMenuItem  = function (game_state, name, position, properties) {
    "use strict";
    require('./MenuItem').call(this, game_state, name, position, properties);

    var showStat = require('./ShowStat');
    this.player_unit_health = new showStat(this.game_state, this.text + "_health", {x: 280, y: this.y}, {group: "hud", text: "", style: properties.style, prefab: this.text, stat: "health"});
    this.player_unit_mana = new showStat(this.game_state, this.text + "_health", {x: 280, y: this.y}, {group: "hud", text: "", style: properties.style, prefab: this.text, stat: "mana"});
};

PlayerMenuItem.prototype = Object.create(require('./MenuItem').prototype);
PlayerMenuItem.prototype.constructor = PlayerMenuItem;

PlayerMenuItem.prototype.select = function () {
    "use strict";
    var player_unit = this.game_state.prefabs[this.text];
    // use current selected item on selected unit
    this.game_state.prefabs.inventory.use_item(this.game_state.current_item, player_unit);

    // show actions menu again
    this.game_state.prefabs.items_menu.disable();
    this.game_state.prefabs.items_menu.hide();
    this.game_state.prefabs.actions_menu.show();
    this.game_state.prefabs.actions_menu.enable();
};

module.exports = PlayerMenuItem;

},{"./MenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MenuItem.js","./ShowStat":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ShowStat.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ShowStat.js":[function(require,module,exports){
var ShowStat = function (game_state, name, position, properties) {
    "use strict";
    require('./../TextPrefab').call(this, game_state, name, position, properties);
    
    this.prefab = this.game_state.prefabs[properties.prefab];
    this.stat = properties.stat;
};

ShowStat.prototype = Object.create(require('./../TextPrefab').prototype);
ShowStat.prototype.constructor = ShowStat;

ShowStat.prototype.update = function () {
    "use strict";
    this.text = this.prefab.stats[this.stat];
};

module.exports = ShowStat;

},{"./../TextPrefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\TextPrefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js":[function(require,module,exports){
var Prefab = function (game_state, name, position, properties) {
    "use strict";
    Phaser.Sprite.call(this, game_state.game, position.x, position.y, properties.texture);

    this.game_state = game_state;

    this.name = name;

    this.game_state.groups[properties.group].add(this);
    this.frame = +properties.frame;

    if (properties.scale) {
        this.scale.setTo(properties.scale.x, properties.scale.y);
    }

    this.game_state.prefabs[name] = this;
};

Prefab.prototype = Object.create(Phaser.Sprite.prototype);
Prefab.prototype.constructor = Prefab;

module.exports = Prefab;
},{}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\TextPrefab.js":[function(require,module,exports){
var TextPrefab  = function (game_state, name, position, properties) {
    "use strict";
    Phaser.Text.call(this, game_state.game, position.x, position.y, properties.text, properties.style);
    
    this.game_state = game_state;
    
    this.name = name;
    
    this.game_state.groups[properties.group].add(this);
    
    this.game_state.prefabs[name] = this;
};

TextPrefab.prototype = Object.create(Phaser.Text.prototype);
TextPrefab.prototype.constructor = TextPrefab;

module.exports = TextPrefab;
},{}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\TilePrefab.js":[function(require,module,exports){
var TilePrefab = function (game_state, name, position, properties) {
    "use strict";
    Phaser.TileSprite.call(this, game_state.game, position.x, position.y, properties.width, properties.height, properties.texture);

    this.game_state = game_state;

    this.name = name;

    this.game_state.groups[properties.group].add(this);
    this.frame = +properties.frame;

    this.game_state.prefabs[name] = this;
};

TilePrefab.prototype = Object.create(Phaser.TileSprite.prototype);
TilePrefab.prototype.constructor = TilePrefab;

module.exports = TilePrefab;

},{}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\Attack.js":[function(require,module,exports){
var Attack = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);
    
    this.owner = this.game_state.prefabs[properties.owner_name];
};

Attack.prototype = Object.create(require('./../Prefab').prototype);
Attack.prototype.constructor = Attack;

Attack.prototype.show_message = function (target, damage) {
    "use strict";
    var action_message_position, action_message_text, attack_message;
    // show attack message
    action_message_position = new Phaser.Point(this.game_state.game.world.width / 2, this.game_state.game.world.height * 0.1);
    action_message_text = this.owner.name + " attacks " + target.name + " with " + damage + " damage";
    var actionMessage = require('./../HUD/ActionMessage');
    attack_message = new actionMessage(this.game_state, this.name + "_action_message", action_message_position, {group: "hud", texture:     "rectangle_image", scale: {x: 0.85, y: 0.2}, duration: 1, message: action_message_text});
};

module.exports = Attack;
},{"./../HUD/ActionMessage":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ActionMessage.js","./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\EnemyUnit.js":[function(require,module,exports){
var EnemyUnit = function (game_state, name, position, properties) {
    "use strict";
    require('./Unit').call(this, game_state, name, position, properties);

    this.anchor.setTo(0.5);

    this.scale.setTo(-1, 1);
};

EnemyUnit.prototype = Object.create(require('./Unit').prototype);
EnemyUnit.prototype.constructor = EnemyUnit;

EnemyUnit.prototype.act = function () {
    "use strict";
    var target_index, target, damage;
    // randomly choose target
    target_index = this.game_state.rnd.between(0, this.game_state.groups.player_units.countLiving() - 1);
    target = this.game_state.groups.player_units.children[target_index];

    this.attack(target);
};

EnemyUnit.prototype.kill = function () {
    "use strict";
    var menu_item_index, menu_item;
    Phaser.Sprite.prototype.kill.call(this);
    // remove from the menu
    menu_item_index = this.game_state.prefabs.enemy_units_menu.find_item_index(this.name);
    menu_item = this.game_state.prefabs.enemy_units_menu.remove_item(menu_item_index);
    menu_item.kill();
};

module.exports = EnemyUnit;
},{"./Unit":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\Unit.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\MagicAttack.js":[function(require,module,exports){
var MagicAttack = function (game_state, name, position, properties) {
    "use strict";
    require('./Attack').call(this, game_state, name, position, properties);
    
    this.mana_cost = properties.mana_cost;
};

MagicAttack.prototype = Object.create(require('./Attack').prototype);
MagicAttack.prototype.constructor = MagicAttack;

MagicAttack.prototype.hit = function (target) {
    "use strict";
    var damage, attack_multiplier, defense_multiplier, action_message_position, action_message_text, attack_message;
    // the attack multiplier for magic attacks is higher
    attack_multiplier = this.game_state.game.rnd.realInRange(0.9, 1.3);
    defense_multiplier = this.game_state.game.rnd.realInRange(0.8, 1.2);
    // calculate damage using the magic attack stat
    damage = Math.max(0, Math.round((attack_multiplier * this.owner.stats.magic_attack) - (defense_multiplier * target.stats.defense)));
    // apply damage
    target.receive_damage(damage);
    
    // reduce the unit mana
    this.game_state.current_unit.stats.mana -= this.mana_cost;
    
    this.show_message(target, damage);
};

module.exports = MagicAttack;
},{"./Attack":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\Attack.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\PhysicalAttack.js":[function(require,module,exports){
var PhysicalAttack = function (game_state, name, position, properties) {
    "use strict";
    require('./Attack').call(this, game_state, name, position, properties);
};

PhysicalAttack.prototype = Object.create(require('./Attack').prototype);
PhysicalAttack.prototype.constructor = PhysicalAttack;

PhysicalAttack.prototype.hit = function (target) {
    "use strict";
    var damage, attack_multiplier, defense_multiplier, action_message_position, action_message_text, attack_message;
    // calculate random attack and defense multipliers
    attack_multiplier = this.game_state.game.rnd.realInRange(0.8, 1.2);
    defense_multiplier = this.game_state.game.rnd.realInRange(0.8, 1.2);
    // calculate damage
    damage = Math.max(0, Math.round((attack_multiplier * this.owner.stats.attack) - (defense_multiplier * target.stats.defense)));
    // apply damage
    target.receive_damage(damage);
    
    this.show_message(target, damage);
};

module.exports = PhysicalAttack;
},{"./Attack":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\Attack.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\PlayerUnit.js":[function(require,module,exports){
var PlayerUnit = function (game_state, name, position, properties) {
    "use strict";
    require('./Unit').call(this, game_state, name, position, properties);

    this.anchor.setTo(0.5);
};

PlayerUnit.prototype = Object.create(require('./Unit').prototype);
PlayerUnit.prototype.constructor = PlayerUnit;

PlayerUnit.prototype.act = function () {
    "use strict";
    var unit_index, player_units_menu_items;
    // search for the index of this unit in the player_units_menu
    unit_index = this.game_state.prefabs.player_units_menu.find_item_index(this.name);
    this.game_state.prefabs.player_units_menu.move_selection(unit_index);

    // enable menu for choosing the action
    this.game_state.prefabs.actions_menu.enable();
};

PlayerUnit.prototype.kill = function () {
    "use strict";
    var menu_item_index, menu_item;
    Phaser.Sprite.prototype.kill.call(this);
    // remove from the menu
    menu_item_index = this.game_state.prefabs.player_units_menu.find_item_index(this.name);
    this.game_state.prefabs.player_units_menu.menu_items[menu_item_index].alpha = 0.5;
};

PlayerUnit.prototype.receive_experience = function (experience) {
    "use strict";
    // increase experience
    this.stats.experience += experience;
    var next_level_data = this.game_state.experience_table[this.stats.current_level];
    // if current experience is greater than the necessary to the next level, the unit gains a level
    if (this.stats.experience >= next_level_data.required_exp) {
        this.stats.current_level += 1;
        this.stats.experience = 0;
        // increase unit stats according to new level
        for (var stat in next_level_data.stats_increase) {
            if (next_level_data.stats_increase.hasOwnProperty(stat)) {
                this.stats[stat] += next_level_data.stats_increase[stat];
            }
        }
    }
};

module.exports = PlayerUnit;
},{"./Unit":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\Unit.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\Unit.js":[function(require,module,exports){
var Unit = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);

    this.anchor.setTo(0.5);

    this.stats = properties.stats;

    this.attacked_animation = this.game_state.game.add.tween(this);
    this.attacked_animation.to({tint: 0xFF0000}, 200);
    this.attacked_animation.onComplete.add(this.restore_tint, this);
};

Unit.prototype = Object.create(require('./../Prefab').prototype);
Unit.prototype.constructor = Unit;

Unit.prototype.calculate_act_turn = function (current_turn) {
    "use strict";
    // calculate the act turn based on the unit speed
    this.act_turn = current_turn + Math.ceil(100 / this.stats.speed);
};

Unit.prototype.receive_damage = function (damage) {
    "use strict";
    this.stats.health -= damage;
    this.attacked_animation.start();
    if (this.stats.health <= 0) {
        this.stats.health = 0;
        this.kill();
    }
};

Unit.prototype.restore_tint = function () {
    "use strict";
    this.tint = 0xFFFFFF;
};

Unit.prototype.attack = function (target) {
    "use strict";
    var damage, attack_multiplier, defense_multiplier, action_message_position, action_message_text, attack_message;
    // attack target
    attack_multiplier = this.game_state.game.rnd.realInRange(0.8, 1.2);
    defense_multiplier = this.game_state.game.rnd.realInRange(0.8, 1.2);
    damage = Math.round((attack_multiplier * this.stats.attack) - (defense_multiplier * target.stats.defense));
    target.receive_damage(damage);

    // show attack message
    action_message_position = new Phaser.Point(this.game_state.game.world.width / 2, this.game_state.game.world.height * 0.1);
    action_message_text = this.name + " attacks " + target.name + " with " + damage + " damage";
    var actionMessage = require('./../HUD/ActionMessage');
    attack_message = new actionMessage(this.game_state, this.name + "_action_message", action_message_position, {
        group: "hud",
        texture: "rectangle_image",
        scale: {x: 0.75, y: 0.2},
        duration: 1,
        message: action_message_text
    });
};

module.exports = Unit;
},{"./../HUD/ActionMessage":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ActionMessage.js","./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\items\\Inventory.js":[function(require,module,exports){
var Inventory = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);
    
    this.item_classes = {
        "potion": require('./Potion').prototype.constructor
    };

    this.items = [];
};

Inventory.prototype = Object.create(require('./../Prefab').prototype);
Inventory.prototype.constructor = Inventory;

Inventory.prototype.create_menu = function (position) {
    "use strict";
    var menu_items, item_index, item, menu_item, items_menu;
    // create units menu items
    item_index = 0;
    menu_items = [];
    for (item_index = 0; item_index < this.items.length; item_index += 1) {
        item = this.items[item_index];
        var itemMenuItem = require('./../HUD/ItemMenuItem');
        menu_item = new itemMenuItem(this.game_state, item.name + "_menu_item", {x: position.x, y: position.y + item_index * 20}, {group: "hud", text: item.name, style: Object.create(this.game_state.TEXT_STYLE)});
        menu_items.push(menu_item);
    }
    // create units menu
    var menu = require('./../HUD/Menu');
    items_menu = new menu(this.game_state, "items_menu", position, {group: "hud", menu_items: menu_items});
    items_menu.hide();
};

Inventory.prototype.collect_item = function (item_object) {
    "use strict";
    var item = new this.item_classes[item_object.type](this.game_state, item_object.type + this.items.length, {x: 0, y: 0}, item_object.properties);
    this.items.push(item);
};

Inventory.prototype.use_item = function (item_name, target) {
    "use strict";
    // remove item from items list
    for (var item_index = 0; item_index < this.items.length; item_index += 1) {
        if (this.items[item_index].name === item_name) {
            this.items[item_index].use(target);
            this.items.splice(item_index, 1);
            break;
        }
    }
};

module.exports = Inventory;

},{"./../HUD/ItemMenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\ItemMenuItem.js","./../HUD/Menu":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\Menu.js","./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js","./Potion":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\items\\Potion.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\items\\Item.js":[function(require,module,exports){
var Item = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);
};

Item.prototype = Object.create(require('./../Prefab').prototype);
Item.prototype.constructor = Item;

Item.prototype.use = function () {
    "use strict";
    // by default the item is destroyed
    this.kill();
};

Item.prototype.kill = function () {
    "use strict";
    Phaser.Sprite.prototype.kill.call(this);
    // remove item from the menu
    var menu_item_index = this.game_state.prefabs.items_menu.find_item_index(this.name);
    var menu_item = this.game_state.prefabs.items_menu.remove_item(menu_item_index);
    menu_item.kill();
};

module.exports = Item;
},{"./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\items\\Potion.js":[function(require,module,exports){
var Potion = function (game_state, name, position, properties) {
    "use strict";
    require('./Item').call(this, game_state, name, position, properties);
    this.health_power = properties.health_power;
};

Potion.prototype = Object.create(require('./Item').prototype);
Potion.prototype.constructor = Potion;

Potion.prototype.use = function (target) {
    "use strict";
    require('./Item').prototype.use.call(this);
    target.stats.health += this.health_power;
};

module.exports = Potion;
},{"./Item":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\items\\Item.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\world\\EnemySpawner.js":[function(require,module,exports){
var EnemySpawner = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);
    
    this.game_state.game.physics.arcade.enable(this);
    this.body.immovable = true;
    
    this.overlapping = true;
};

EnemySpawner.prototype = Object.create(require('./../Prefab').prototype);
EnemySpawner.prototype.constructor = EnemySpawner;

EnemySpawner.prototype.update = function () {
    "use strict";
    this.overlapping = this.game_state.game.physics.arcade.overlap(this, this.game_state.groups.players, this.check_for_spawn, null, this);
};

EnemySpawner.prototype.check_for_spawn = function () {
    "use strict";
    var spawn_chance, encounter_index, enemy_encounter;
    // check for spawn only once for overlap
    if (!this.overlapping) {
        spawn_chance = this.game_state.game.rnd.frac();
        // check if the enemy spawn probability is less than the generated random number for each spawn
        for (encounter_index = 0; encounter_index < this.game_state.level_data.enemy_encounters.length; encounter_index += 1) {
            enemy_encounter = this.game_state.level_data.enemy_encounters[encounter_index];
            if (spawn_chance <= enemy_encounter.probability) {
                // save current player position for later
                this.game_state.player_position = this.game_state.prefabs.player.position;
                // call battle state
                console.log("TO BATTLE");
                this.game_state.game.state.start("BootState", false, false, "assets/levels/battle.json", "BattleState", {encounter: enemy_encounter, party_data: this.game_state.party_data, inventory: this.game_state.inventory});
                break;
            }
        }
    }
};

module.exports = EnemySpawner;

},{"./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\world\\Player.js":[function(require,module,exports){
var Player = function (game_state, name, position, properties) {
    "use strict";
    require('./../Prefab').call(this, game_state, name, position, properties);
    
    this.anchor.setTo(0.5);
    
    this.walking_speed = +properties.walking_speed;
    
    this.animations.add("walking_down", [6, 7, 8], 10, true);
    this.animations.add("walking_left", [9, 10, 11], 10, true);
    this.animations.add("walking_right", [3, 4, 5], 10, true);
    this.animations.add("walking_up", [0, 1, 2], 10, true);
    
    this.stopped_frames = [7, 10, 4, 1, 7];

    this.game_state.game.physics.arcade.enable(this);
    this.body.setSize(16, 16, 0, 8);
    this.body.collideWorldBounds = true;

    this.cursors = this.game_state.game.input.keyboard.createCursorKeys();
};

Player.prototype = Object.create(require('./../Prefab').prototype);
Player.prototype.constructor = Player;

Player.prototype.update = function () {
    "use strict";
    this.game_state.game.physics.arcade.collide(this, this.game_state.layers.collision_back);
    this.game_state.game.physics.arcade.collide(this, this.game_state.layers.collision_front);
    
    if (this.cursors.left.isDown && this.body.velocity.x <= 0) {
        // move left
        this.body.velocity.x = -this.walking_speed;
        if (this.body.velocity.y === 0) {
            this.animations.play("walking_left");
        }
    } else if (this.cursors.right.isDown && this.body.velocity.x >= 0) {
        // move right
        this.body.velocity.x = +this.walking_speed;
        if (this.body.velocity.y === 0) {
            this.animations.play("walking_right");
        }
    } else {
        this.body.velocity.x = 0;
    }

    if (this.cursors.up.isDown && this.body.velocity.y <= 0) {
        // move up
        this.body.velocity.y = -this.walking_speed;
        if (this.body.velocity.x === 0) {
            this.animations.play("walking_up");
        }
    } else if (this.cursors.down.isDown && this.body.velocity.y >= 0) {
        // move down
        this.body.velocity.y = +this.walking_speed;
        if (this.body.velocity.x === 0) {
            this.animations.play("walking_down");
        }
    } else {
        this.body.velocity.y = 0;
    }
    
    if (this.body.velocity.x === 0 && this.body.velocity.y === 0) {
        // stop current animation
        this.animations.stop();
        this.frame = this.stopped_frames[this.body.facing];
    }
};

module.exports = Player;
},{"./../Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js"}],"d:\\phaserGulpTurnbased\\src\\js\\states\\BattleState.js":[function(require,module,exports){
var BattleState = function () {
    "use strict";
    Phaser.State.call(this);

    this.prefab_classes = {
        "background": require('./../prefabs/TilePrefab').prototype.constructor,
        "rectangle": require('./../prefabs/Prefab').prototype.constructor,
        "player_unit": require('./../prefabs/Units/PlayerUnit').prototype.constructor,
        "enemy_unit": require('./../prefabs/Units/EnemyUnit').prototype.constructor,
        "inventory": require('./../prefabs/items/Inventory').prototype.constructor
    };

    this.TEXT_STYLE = {font: "14px Arial", fill: "#FFFFFF"};
};

BattleState.prototype = Object.create(Phaser.State.prototype);
BattleState.prototype.constructor = BattleState;

BattleState.prototype.init = function (level_data, extra_parameters) {
    "use strict";
    console.log("init");
    this.level_data = level_data;
    this.encounter = extra_parameters.encounter;
    this.party_data = extra_parameters.party_data;
    this.inventory = extra_parameters.inventory;


    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.scale.pageAlignHorizontally = true;
    this.scale.pageAlignVertically = true;
};

BattleState.prototype.preload = function () {
    "use strict";
    console.log("preload");
    this.load.text("experience_table", "assets/levels/experience_table.json");
};

BattleState.prototype.create = function () {
    "use strict";
    console.log("create");
    var group_name, prefab_name, player_unit_name, enemy_unit_name;

    // create groups
    this.groups = {};
    this.level_data.groups.forEach(function (group_name) {
        this.groups[group_name] = this.game.add.group();
    }, this);

    // create prefabs
    this.prefabs = {};
    for (prefab_name in this.level_data.prefabs) {
        if (this.level_data.prefabs.hasOwnProperty(prefab_name)) {
            // create prefab
            this.create_prefab(prefab_name, this.level_data.prefabs[prefab_name]);
        }
    }

    // if there is no inventory from WorldState, create an empty one
    if (this.inventory) {
        this.prefabs.inventory = this.inventory;
    } else {
        var inv = require('./../prefabs/items/Inventory');
        this.prefabs.inventory = new inv(this, "inventory", {x: 0, y: 0}, {group: "items"});
    }

    // create enemy units
    for (enemy_unit_name in this.encounter.enemy_data) {
        if (this.encounter.enemy_data.hasOwnProperty(enemy_unit_name)) {
            // create enemy units
            this.create_prefab(enemy_unit_name, this.encounter.enemy_data[enemy_unit_name]);
        }
    }

    // create player units
    for (player_unit_name in this.party_data) {
        if (this.party_data.hasOwnProperty(player_unit_name)) {
            // create player units
            this.create_prefab(player_unit_name, this.party_data[player_unit_name]);
        }
    }

    // save experience table
    this.experience_table = JSON.parse(this.game.cache.getText("experience_table"));

    this.init_hud();

    // store units in a priority queue which compares the units act turn
    this.units = new PriorityQueue({
        comparator: function (unit_a, unit_b) {
            return unit_a.act_turn - unit_b.act_turn;
        }
    });
    this.groups.player_units.forEach(function (unit) {
        unit.calculate_act_turn(0);
        this.units.queue(unit);
    }, this);
    this.groups.enemy_units.forEach(function (unit) {
        unit.calculate_act_turn(0);
        this.units.queue(unit);
    }, this);

    this.next_turn();
};

BattleState.prototype.create_prefab = function (prefab_name, prefab_data) {
    "use strict";
    var prefab;
    // create object according to its type
    if (this.prefab_classes.hasOwnProperty(prefab_data.type)) {
        prefab = new this.prefab_classes[prefab_data.type](this, prefab_name, prefab_data.position, prefab_data.properties);
    }
};

BattleState.prototype.init_hud = function () {
    "use strict";
    var unit_index, player_unit_health;

    // show player actions
    this.show_player_actions({x: 106, y: 210});

    // show player units
    this.show_units("player_units", {x: 202, y: 210}, require('./../prefabs/HUD/PlayerMenuItem').prototype.constructor);

    // show enemy units
    this.show_units("enemy_units", {x: 10, y: 210}, require('./../prefabs/HUD/EnemyMenuItem').prototype.constructor);

    // create items menu
    this.prefabs.inventory.create_menu({x: 106, y: 210});
};

BattleState.prototype.show_units = function (group_name, position, menu_item_constructor) {
    "use strict";
    var unit_index, menu_items, unit_menu_item, units_menu;

    // create units menu items
    unit_index = 0;
    menu_items = [];
    this.groups[group_name].forEach(function (unit) {
        unit_menu_item = new menu_item_constructor(this, unit.name + "_menu_item", {
            x: position.x,
            y: position.y + unit_index * 20
        }, {group: "hud", text: unit.name, style: Object.create(this.TEXT_STYLE)});
        unit_index += 1;
        menu_items.push(unit_menu_item);
    }, this);
    // create units menu
    var menu = require('./../prefabs/HUD/Menu');
    units_menu = new menu(this, group_name + "_menu", position, {group: "hud", menu_items: menu_items});
};

BattleState.prototype.show_player_actions = function (position) {
    "use strict";
    var actions, actions_menu_items, action_index, actions_menu;
    // available actions
    actions = [
        {text: "Attack", item_constructor: require('./../prefabs/HUD/AttackMenuItem').prototype.constructor},
        {text: "Magic", item_constructor: require('./../prefabs/HUD/MagicAttackMenuItem').prototype.constructor},
        {text: "Item", item_constructor: require('./../prefabs/HUD/InventoryMenuItem').prototype.constructor}
    ];
    actions_menu_items = [];
    action_index = 0;
    // create a menu item for each action
    actions.forEach(function (action) {
        actions_menu_items.push(new action.item_constructor(this, action.text + "_menu_item", {
            x: position.x,
            y: position.y + action_index * 20
        }, {group: "hud", text: action.text, style: Object.create(this.TEXT_STYLE)}));
        action_index += 1;
    }, this);
    var menu = require('./../prefabs/HUD/Menu');
    actions_menu = new menu(this, "actions_menu", position, {group: "hud", menu_items: actions_menu_items});
};

BattleState.prototype.next_turn = function () {
    "use strict";
    // if all enemy units are dead, go back to the world state
    console.log(this.groups);
    if (this.groups.enemy_units.countLiving() === 0) {
        this.end_battle();
    }

    // if all player units are dead, restart the game
    if (this.groups.player_units.countLiving() === 0) {
        this.game_over();
    }

    // takes the next unit
    this.current_unit = this.units.dequeue();
    // if the unit is alive, it acts, otherwise goes to the next turn
    if (this.current_unit.alive) {
        this.current_unit.act();
        this.current_unit.calculate_act_turn(this.current_unit.act_turn);
        this.units.queue(this.current_unit);
    } else {
        this.next_turn();
    }
};

BattleState.prototype.game_over = function () {
    "use strict";
    console.log("GAME_OVER");
    // go back to WorldState restarting the player position
    this.game.state.start("BootState", true, false, "assets/levels/level1.json", "WorldState", {restart_position: true});
};

BattleState.prototype.end_battle = function () {
    "use strict";
    var received_experience = this.encounter.reward.experience;
    this.groups.player_units.forEach(function (player_unit) {
        // receive experience from enemy
        player_unit.receive_experience(received_experience / this.groups.player_units.children.length);
        // save current party stats
        this.party_data[player_unit.name].properties.stats = player_unit.stats;
    }, this);


    this.encounter.reward.items.forEach(function (item_object) {
        this.prefabs.inventory.collect_item(item_object);
    }, this);

    console.log("BATTLE WON");
    // go back to WorldState with the current party data
    this.game.state.start("BootState", true, false, "assets/levels/level1.json", "WorldState", {
        party_data: this.party_data,
        inventory: this.prefabs.inventory
    });
};

module.exports = BattleState;

},{"./../prefabs/HUD/AttackMenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\AttackMenuItem.js","./../prefabs/HUD/EnemyMenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\EnemyMenuItem.js","./../prefabs/HUD/InventoryMenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\InventoryMenuItem.js","./../prefabs/HUD/MagicAttackMenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\MagicAttackMenuItem.js","./../prefabs/HUD/Menu":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\Menu.js","./../prefabs/HUD/PlayerMenuItem":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\HUD\\PlayerMenuItem.js","./../prefabs/Prefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Prefab.js","./../prefabs/TilePrefab":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\TilePrefab.js","./../prefabs/Units/EnemyUnit":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\EnemyUnit.js","./../prefabs/Units/PlayerUnit":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\Units\\PlayerUnit.js","./../prefabs/items/Inventory":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\items\\Inventory.js"}],"d:\\phaserGulpTurnbased\\src\\js\\states\\BootState.js":[function(require,module,exports){
var BootState = function () {
    "use strict";
    Phaser.State.call(this);
};

BootState.prototype = Object.create(Phaser.State.prototype);
BootState.prototype.constructor = BootState;

BootState.prototype.init = function (level_file, next_state, extra_parameters) {
    "use strict";
    this.level_file = level_file;
    this.next_state = next_state;
    this.extra_parameters = extra_parameters;
};

BootState.prototype.preload = function () {
    "use strict";
    this.load.text("level1", this.level_file);
};

BootState.prototype.create = function () {
    "use strict";
    var level_text = this.game.cache.getText("level1");
    var level_data = JSON.parse(level_text);
    this.game.state.start("LoadingState", true, false, level_data, this.next_state, this.extra_parameters);
};

module.exports = BootState;

},{}],"d:\\phaserGulpTurnbased\\src\\js\\states\\LoadingState.js":[function(require,module,exports){
var LoadingState = function () {};


LoadingState = function () {
    "use strict";
    Phaser.State.call(this);
};

LoadingState.prototype = Object.create(Phaser.State.prototype);
LoadingState.prototype.constructor = LoadingState;

LoadingState.prototype.init = function (level_data, next_state, extra_parameters) {
    "use strict";
    this.level_data = level_data;
    this.next_state = next_state;
    this.extra_parameters = extra_parameters;
};

LoadingState.prototype.preload = function () {
    "use strict";
    var assets = this.level_data.assets;
    for (var asset_key in assets) { // load assets according to asset key
        if (assets.hasOwnProperty(asset_key)) {
            var asset = assets[asset_key];
            switch (asset.type) {
            case "image":
                this.load.image(asset_key, asset.source);
                break;
            case "spritesheet":
                this.load.spritesheet(asset_key, asset.source, asset.frame_width, asset.frame_height, asset.frames, asset.margin, asset.spacing);
                break;
            case "tilemap":
                this.load.tilemap(asset_key, asset.source, null, Phaser.Tilemap.TILED_JSON);
                break;
            }
        }
    }
};

LoadingState.prototype.create = function () {
    "use strict";
    this.game.state.start(this.next_state, true, false, this.level_data, this.extra_parameters);
};

module.exports = LoadingState;

},{}],"d:\\phaserGulpTurnbased\\src\\js\\states\\WorldState.js":[function(require,module,exports){
var WorldState = function () {
    "use strict";
    Phaser.State.call(this);

    this.prefab_classes = {
        "player": require('./../prefabs/world/Player').prototype.constructor,
        "enemy_spawner": require('./../prefabs/world/EnemySpawner').prototype.constructor
    };
};

WorldState.prototype = Object.create(Phaser.State.prototype);
WorldState.prototype.constructor = WorldState;

WorldState.prototype.init = function (level_data, extra_parameters) {
    "use strict";
    var tileset_index;
    this.level_data = this.level_data || level_data;

    this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
    this.scale.pageAlignHorizontally = true;
    this.scale.pageAlignVertically = true;

    // start physics system
    this.game.physics.startSystem(Phaser.Physics.ARCADE);
    this.game.physics.arcade.gravity.y = 0;

    // create map and set tileset
    this.map = this.game.add.tilemap(this.level_data.map.key);
    tileset_index = 0;
    this.map.tilesets.forEach(function (tileset) {
        this.map.addTilesetImage(tileset.name, this.level_data.map.tilesets[tileset_index]);
        tileset_index += 1;
    }, this);

    // if no party data is in the parameters, initialize it with default values
    this.party_data = extra_parameters.party_data || {
            "fighter": {
                "type": "player_unit",
                "position": {"x": 250, "y": 50},
                "properties": {
                    "texture": "male_fighter_spritesheet",
                    "group": "player_units",
                    "frame": 10,
                    "stats": {
                        "attack": 20,
                        "magic_attack": 5,
                        "defense": 5,
                        "health": 100,
                        "mana": 100,
                        "speed": 15,
                        "experience": 0,
                        "current_level": 0
                    }
                }
            },
            "mage": {
                "type": "player_unit",
                "position": {"x": 250, "y": 100},
                "properties": {
                    "texture": "female_mage_spritesheet",
                    "group": "player_units",
                    "frame": 10,
                    "stats": {
                        "attack": 5,
                        "magic_attack": 20,
                        "defense": 2,
                        "health": 100,
                        "mana": 100,
                        "speed": 10,
                        "experience": 0,
                        "current_level": 0
                    }
                }
            },
            "ranger": {
                "type": "player_unit",
                "position": {"x": 250, "y": 150},
                "properties": {
                    "texture": "female_ranger_spritesheet",
                    "group": "player_units",
                    "frame": 10,
                    "stats": {
                        "attack": 10,
                        "magic_attack": 10,
                        "defense": 3,
                        "health": 100,
                        "mana": 100,
                        "speed": 20,
                        "experience": 0,
                        "current_level": 0
                    }
                }
            }
        };

    if (extra_parameters.restart_position) {
        this.player_position = undefined;
    }
};

WorldState.prototype.create = function () {
    "use strict";
    var group_name, object_layer, collision_tiles;

    // create map layers
    this.layers = {};
    this.map.layers.forEach(function (layer) {
        this.layers[layer.name] = this.map.createLayer(layer.name);
        if (layer.properties.collision) { // collision layer
            collision_tiles = [];
            layer.data.forEach(function (data_row) { // find tiles used in the layer
                data_row.forEach(function (tile) {
                    // check if it's a valid tile index and isn't already in the list
                    if (tile.index > 0 && collision_tiles.indexOf(tile.index) === -1) {
                        collision_tiles.push(tile.index);
                    }
                }, this);
            }, this);
            this.map.setCollision(collision_tiles, true, layer.name);
        }
    }, this);
    // resize the world to be the size of the current layer
    this.layers[this.map.layer.name].resizeWorld();

    // create groups
    this.groups = {};
    this.level_data.groups.forEach(function (group_name) {
        this.groups[group_name] = this.game.add.group();
    }, this);

    this.prefabs = {};

    for (object_layer in this.map.objects) {
        if (this.map.objects.hasOwnProperty(object_layer)) {
            // create layer objects
            this.map.objects[object_layer].forEach(this.create_object, this);
        }
    }

    // if we came from BattleState, move the player to the previous position
    if (this.player_position) {
        this.prefabs.player.reset(this.player_position.x, this.player_position.y);
    }
};

WorldState.prototype.create_object = function (object) {
    "use strict";
    var object_y, position, prefab;
    // tiled coordinates starts in the bottom left corner
    object_y = (object.gid) ? object.y - (this.map.tileHeight / 2) : object.y + (object.height / 2);
    position = {"x": object.x + (this.map.tileHeight / 2), "y": object_y};
    // create object according to its type
    if (this.prefab_classes.hasOwnProperty(object.type)) {
        prefab = new this.prefab_classes[object.type](this, object.name, position, object.properties);
    }
    this.prefabs[object.name] = prefab;
};

module.exports = WorldState;


},{"./../prefabs/world/EnemySpawner":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\world\\EnemySpawner.js","./../prefabs/world/Player":"d:\\phaserGulpTurnbased\\src\\js\\prefabs\\world\\Player.js"}]},{},["d:\\phaserGulpTurnbased\\src\\js\\main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
